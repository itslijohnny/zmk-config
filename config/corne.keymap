/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>


/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34>;
            require-prior-idle-ms = <50>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29>;
            require-prior-idle-ms = <50>;
        };

        copy_cut: copy_cut {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_CUT";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp LC(X)>;
        };

        lshift_cap: lshift_cap {
            compatible = "zmk,behavior-tap-dance";
            label = "LSHIFT_CAP";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>;
        };

        com_sem: com_sem {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_SEM";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_col: dot_col {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COL";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        exc_qmk: exc_qmk {
            compatible = "zmk,behavior-mod-morph";
            label = "EXC_QMK";
            bindings = <&kp EXCL>, <&kp QMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bac_del: bac_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BAC_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        rshift_cap: rshift_cap {
            compatible = "zmk,behavior-tap-dance";
            label = "RSHIFT_CAP";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_SHIFT>, <&caps_word>;
        };

        ltm: ltm {
            compatible = "zmk,behavior-hold-tap";
            label = "LTM";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <50>;
        };

        hmsl: hmsl {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSL";
            bindings = <&lshift_cap>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34>;
            require-prior-idle-ms = <50>;
        };

        hmsr: hmsr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSR";
            bindings = <&rshift_cap>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29>;
            require-prior-idle-ms = <50>;
        };

        lpar_less: lpar_less {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar_greater: rpar_greater {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GREATER";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash_bslash: slash_bslash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_BSLASH";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        ESC_COMBO {
            bindings = <&gresc>;
            key-positions = <1 2>;
        };

        BCSP_COMBO {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 10>;
        };

        FIND_COMBOS {
            bindings = <&kp LC(F)>;
            key-positions = <25 16>;
        };

        SAVE_COMBOS {
            bindings = <&kp LC(S)>;
            key-positions = <24 13>;
        };

        win_copy {
            bindings = <&copy_cut>;
            key-positions = <25 27>;
        };

        SELECT_ALL_COMBOS {
            bindings = <&kp LC(A)>;
            key-positions = <25 13>;
        };

        PASTE_COMBOS {
            bindings = <&kp LC(SLASH)>;
            key-positions = <25 28>;
        };

        wm_12 {
            bindings = <&kp LA(LG(E))>;
            key-positions = <6 18>;
            layers = <3>;
        };

        wm_23 {
            bindings = <&kp LA(LG(T))>;
            key-positions = <18 30>;
            layers = <3>;
        };

        left_par {
            bindings = <&lpar_less>;
            key-positions = <19 20>;
        };

        r_par {
            bindings = <&rpar_greater>;
            key-positions = <20 21>;
        };

        l_br {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
        };

        r_br {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
        };

        plus {
            bindings = <&kp KP_PLUS>;
            key-positions = <7 19>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <19 31>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <8 20>;
        };

        spl {
            bindings = <&slash_bslash>;
            key-positions = <20 32>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <9 21>;
        };

        or {
            bindings = <&kp PIPE>;
            key-positions = <22 34>;
        };

        equ {
            bindings = <&kp EQUAL>;
            key-positions = <6 18>;
            layers = <0 1>;
        };

        under_sc {
            bindings = <&kp UNDER>;
            key-positions = <18 30>;
        };

        grave_combos {
            bindings = <&kp GRAVE>;
            key-positions = <16 28>;
        };

        at_combos {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
        };

        hash_combos {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        dollor_combos {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        percent_combos {
            bindings = <&kp PERCENT>;
            key-positions = <14 26>;
        };

        hat_combos {
            bindings = <&kp CARET>;
            key-positions = <15 27>;
        };
    };

    macros {
        mac_save: mac_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>, <&macro_press>;

            label = "MAC_SAVE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            // -------------------------------------------------------------------------------
            // |      |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |      |
            // |      |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |      |
            // |      |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |      |
            //                    | ESC | TAB | SPC |   | ENT | BSPC | DEL |

            bindings = <
&none  &kp Q         &kp W        &kp E          &kp R       &kp T           &kp Y         &kp U         &kp I             &kp O        &kp P           &none
&none  &hml LCTRL A  &hml LALT S  &hml LGUI D    &hmsl 0 F   &kp G           &kp H         &hmsr 0 J     &hmr RGUI K       &hmr LALT L  &hmr RCTRL SQT  &none
&none  &kp Z         &kp X        &kp C          &kp V       &kp B           &kp N         &kp M         &com_sem          &dot_col     &exc_qmk        &none
                                  &ltm 3 ESCAPE  &ltm 1 TAB  &ltm 2 SPACE    &ltm 2 SPACE  &ltm 1 ENTER  &ltm 4 BACKSPACE
            >;
        };

        num_layer {
            bindings = <
&none  &kp LALT          &kp N7              &kp N8        &kp N9         &none         &none       &kp N7         &kp N8             &kp N9        &kp RALT           &none
&none  &kp LEFT_CONTROL  &hml LALT NUMBER_4  &hml LGUI N5  &hml LSHFT N6  &kp N0        &kp N0      &hmr RSHFT N4  &hmr RIGHT_GUI N5  &hmr RALT N6  &kp RIGHT_CONTROL  &none
&none  &kp LCMD          &kp N1              &kp N2        &kp N3         &kp PERIOD    &kp PERIOD  &kp N1         &kp NUMBER_2       &kp N3        &kp RCMD           &none
                                             &trans        &trans         &trans        &trans      &trans         &trans
            >;

            label = "NUM";
        };

        nav_layer {
            bindings = <
&none  &kp LALT          &none           &kp UP_ARROW    &none             &kp PG_UP    &kp HOME  &none            &kp UP_ARROW          &none            &kp RIGHT_ALT  &none
&none  &kp LEFT_CONTROL  &hml LALT LEFT  &hml LCMD DOWN  &hml LSHFT RIGHT  &kp PG_DN    &kp END   &hmr RSHFT LEFT  &hmr RCMD DOWN_ARROW  &hmr RALT RIGHT  &kp RCTRL      &none
&none  &kp LCMD          &none           &none           &none             &none        &none     &none            &none                 &none            &kp RCMD       &none
                                         &trans          &trans            &trans       &trans    &trans           &trans
            >;
        };

        fn_layer {
            bindings = <
&none  &kp F12                &kp F7        &kp F8        &kp F9         &none     &kp LA(LG(D))  &none                   &kp C_VOLUME_UP     &none                &none      &none
&none  &hml LEFT_CONTROL F11  &hml LALT F4  &hml LCMD F5  &hml LSHFT F6  &none     &kp LA(LG(F))  &hmr RSHFT LG(LEFT)     &hmr RCMD C_VOL_DN  &hmr RALT LG(RIGHT)  &kp RCTRL  &none
&none  &kp F10                &kp F1        &kp F2        &kp F3         &none     &kp LA(LG(G))  &kp LA(LG(LEFT_ARROW))  &kp C_MUTE          &kp LA(LG(RIGHT))    &none      &none
                                            &trans        &trans         &trans    &trans         &trans                  &trans
            >;
        };

        sys_layer {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR     &trans  &trans  &trans  &trans  &trans  &none
&none  &trans        &trans        &trans        &trans        &bootloader    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans        &trans        &trans        &trans        &trans         &trans  &trans  &trans  &trans  &trans  &none
                                   &trans        &trans        &trans         &trans  &trans  &trans
            >;
        };
    };
};
