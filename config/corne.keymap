/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define MAC  4

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34>;
            require-prior-idle-ms = <50>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29>;
            require-prior-idle-ms = <50>;
        };

        copy_cut: copy_cut {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_CUT";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp LC(X)>;
        };

        lshift_cap: lshift_cap {
            compatible = "zmk,behavior-tap-dance";
            label = "LSHIFT_CAP";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>;
        };

        com_sem: com_sem {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_SEM";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_col: dot_col {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COL";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        exc_qmk: exc_qmk {
            compatible = "zmk,behavior-mod-morph";
            label = "EXC_QMK";
            bindings = <&kp EXCL>, <&kp QMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bac_del: bac_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BAC_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        rshift_cap: rshift_cap {
            compatible = "zmk,behavior-tap-dance";
            label = "RSHIFT_CAP";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_SHIFT>, <&caps_word>;
        };

        ltm: ltm {
            compatible = "zmk,behavior-hold-tap";
            label = "LTM";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <50>;
        };

        hmsl: hmsl {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSL";
            bindings = <&lshift_cap>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34>;
            require-prior-idle-ms = <50>;
        };

        hmsr: hmsr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSR";
            bindings = <&rshift_cap>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29>;
            require-prior-idle-ms = <50>;
        };
    };

    combos {
        compatible = "zmk,combos";

        ESC_COMBO {
            bindings = <&gresc>;
            key-positions = <1 2>;
        };

        BCSP_COMBO {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 10>;
        };

        num_div {
            bindings = <&kp SLASH>;
            key-positions = <5 17>;
            layers = <1>;
        };

        SAVE_COMBOS {
            bindings = <&kp LC(S)>;
            key-positions = <24 13>;
        };

        win_copy {
            bindings = <&copy_cut>;
            key-positions = <25 27>;
        };

        num_equ {
            bindings = <&kp EQUAL>;
            key-positions = <17 29>;
            layers = <1>;
        };

        num_div_r {
            bindings = <&kp SLASH>;
            key-positions = <6 18>;
            layers = <1>;
        };

        num_equ_r {
            bindings = <&kp EQUAL>;
            key-positions = <18 30>;
        };
    };

    macros {
        mac_save: mac_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>, <&macro_press>;

            label = "MAC_SAVE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            // -------------------------------------------------------------------------------
            // |      |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |      |
            // |      |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |      |
            // |      |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |      |
            //                    | ESC | TAB | SPC |   | ENT | BSPC | DEL |

            bindings = <
&none  &kp Q         &kp W        &kp E         &kp R       &kp T        &kp Y      &kp U         &kp I            &kp O        &kp P           &none
&none  &hml LCTRL A  &hml LALT S  &hml LGUI D   &hmsl 0 F   &kp G        &kp H      &hmsr 0 J     &hmr RGUI K      &hmr LALT L  &hmr RCTRL SQT  &none
&none  &kp Z         &kp X        &kp C         &kp V       &kp B        &kp N      &kp M         &com_sem         &dot_col     &exc_qmk        &none
                                  &lt 1 ESCAPE  &ltm 1 TAB  &kp SPACE    &kp SPACE  &ltm 1 ENTER  &lt 0 BACKSPACE
            >;
        };

        num_layer {
            bindings = <
&none  &kp LALT          &kp N7              &kp N8        &kp N9         &none         &none       &kp N7         &kp N8             &kp N9        &kp RALT           &none
&none  &kp LEFT_CONTROL  &hml LALT NUMBER_4  &hml LGUI N5  &hml LSHFT N6  &kp N0        &kp N0      &hmr RSHFT N4  &hmr RIGHT_GUI N5  &hmr RALT N6  &kp RIGHT_CONTROL  &none
&none  &kp LCMD          &kp N1              &kp N2        &kp N3         &kp PERIOD    &kp PERIOD  &kp N1         &kp NUMBER_2       &kp N3        &kp RCMD           &none
                                             &trans        &trans         &trans        &trans      &trans         &trans
            >;

            label = "NUM";
        };

        nav_layer {
            bindings = <
&none  &kp LALT          &none           &kp UP_ARROW    &none             &kp PG_UP    &kp HOME  &none            &kp UP_ARROW          &none            &kp RIGHT_ALT  &none
&none  &kp LEFT_CONTROL  &hml LALT LEFT  &hml LCMD DOWN  &hml LSHFT RIGHT  &kp PG_DN    &kp END   &hmr RSHFT LEFT  &hmr RCMD DOWN_ARROW  &hmr RALT RIGHT  &kp RCTRL      &none
&none  &kp LCMD          &none           &none           &none             &none        &none     &none            &none                 &none            &kp RCMD       &none
                                         &trans          &trans            &trans       &trans    &trans           &trans
            >;
        };

        fn_layer {
            bindings = <
&none  &kp LALT          &none           &kp UP_ARROW    &none             &kp PG_UP    &kp HOME  &none            &kp UP_ARROW          &none            &kp RIGHT_ALT  &none
&none  &kp LEFT_CONTROL  &hml LALT LEFT  &hml LCMD DOWN  &hml LSHFT RIGHT  &kp PG_DN    &kp END   &hmr RSHFT LEFT  &hmr RCMD DOWN_ARROW  &hmr RALT RIGHT  &kp RCTRL      &none
&none  &kp LCMD          &none           &none           &none             &none        &none     &none            &none                 &none            &kp RCMD       &none
                                         &trans          &trans            &trans       &trans    &trans           &trans
            >;
        };
    };
};
